package ^agent

import fr.utbm.info.ia51.framework.^agent.AbstractAnimat
import fr.utbm.info.ia51.framework.environment.DynamicType
import fr.utbm.info.ia51.framework.environment.Percept
import fr.utbm.info.ia51.framework.environment.PerceptionEvent
import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.general.motionalgo.KinematicSeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.KinematicWanderAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SteeringSeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SteeringWanderAlgorithm
import fr.utbm.info.ia51.general.motionalgo.WanderAlgorithm
import io.sarl.core.Initialize
import java.util.List

/** 
 * @author c
 * 
 */
agent Visitor extends AbstractAnimat {

	var seekBehaviour : SeekAlgorithm
	var wanderBehaviour : WanderAlgorithm

	val STOP_RADIUS = MathUtil.PI / 10f
	val SLOW_RADIUS = MathUtil.PI / 4f
	val WANDER_CIRCLE_DISTANCE = 60f
	val WANDER_CIRCLE_RADIUS = 20f
	val WANDER_MAX_ROTATION = MathUtil.PI / 10f

	// This function is called from "on Initialize" in the super type.
	override overridableInitializationStage(it : Initialize) {
		super.overridableInitializationStage(it)
		if (this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekAlgorithm
			this.wanderBehaviour = new SteeringWanderAlgorithm(WANDER_CIRCLE_DISTANCE, WANDER_CIRCLE_RADIUS,
				WANDER_MAX_ROTATION, STOP_RADIUS, SLOW_RADIUS)
		} else {
			this.seekBehaviour = new KinematicSeekAlgorithm
			this.wanderBehaviour = new KinematicWanderAlgorithm
		}
	}

	def extractTarget(percepts : List<Percept>) : Percept {
		var targets = percepts.filter[it.type == "TARGET"]
		if (targets.empty) {
			null
		} else {
			targets.get(0)
		}
	}

	on PerceptionEvent {
		var target = occurrence.perceptions.extractTarget

		if (target !== null) {
			// run the seek behaviour
			this.seekBehaviour.run(
				occurrence.body.position,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				target.position
			).emitInfluence 
			// emitInfluenct 用来计算influence
		} else {
			// doNothing
			// // run the wander behaviour
			this.wanderBehaviour.run(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
			).emitInfluence
		}
	}

}
