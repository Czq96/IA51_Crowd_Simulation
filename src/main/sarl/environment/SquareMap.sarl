package environment

import fr.utbm.info.ia51.framework.environment.AbstractEnvironment
import fr.utbm.info.ia51.framework.environment.AgentBody // 生成了小兔子
import fr.utbm.info.ia51.framework.environment.DynamicType
import fr.utbm.info.ia51.framework.environment.Influence
import fr.utbm.info.ia51.framework.environment.MotionInfluence
import fr.utbm.info.ia51.framework.environment.Percept
import fr.utbm.info.ia51.framework.environment.SituatedObject
import fr.utbm.info.ia51.framework.gui.WorldModelStateProvider
import fr.utbm.info.ia51.framework.math.Circle2f
import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Rectangle2f
import fr.utbm.info.ia51.framework.math.Shape2f
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.time.StepTimeManager
import fr.utbm.info.ia51.framework.time.TimeManager
import fr.utbm.info.ia51.framework.util.CollectionUtil
import fr.utbm.info.ia51.general.frustum.CircleFrustum
import java.util.ArrayList
import java.util.Collection
import java.util.List
import java.util.UUID
import java.text.MessageFormat
import java.util.ArrayList;

/** 
 * Model of the world.
 *   
 */
class SquareMap extends AbstractEnvironment implements WorldModelStateProvider {

	static val VISITOR_SIZE = 20f //TODO: change to image

	var agentBodyList = new ArrayList<AgentBody> // TODO AgentBody
	
	/** 
	 * @param width is the width of the world.
	 * @param height is the height of the world.
	 */
	new (width : float, height : float) {
		super(width, height, new StepTimeManager(500))
		//this.spatialList = new List<>()
	}

	def createVisitor {
		var id = UUID::randomUUID
		var frustum = new CircleFrustum(id, 10 * VISITOR_SIZE)
		var body = new AgentBody(
			id,
			new Circle2f(0f, 0f, VISITOR_SIZE), // body
			5f, // max linear speed m/s
			0.5f, // max linear acceleration (m/s)/s
			MathUtil.PI / 4f, // max angular speed r/s
			MathUtil.PI / 10f, // max angular acceleration (r/s)/s
			frustum)
		body.name = MessageFormat::format("Visitor #{0}", this.agentBodyNumber + 1)
		addAgentBody(
			body, 
			randomPosition,
			Math::random as float * MathUtil.TWO_PI)
	}

	protected def randomPosition : Point2f {
		var x = Math::random as float * this.width - VISITOR_SIZE
		var y = Math.random() as float * this.height - VISITOR_SIZE
		return new Point2f(x, y)
	}

	 protected def onAgentBodyCreated(body : AgentBody) {
		this.agentBodyList.add(body) // initialize visitor
	}
	
	protected def onAgentBodyDestroyed(body : AgentBody) {
		throw new UnsupportedOperationException("TODO: onAgentBodyDestroyed")
	}
	
	protected def computeEndogenousBehaviorInfluences : List<Influence> {
		throw new UnsupportedOperationException("TODO: computeEndogenousBehaviorInfluences")
	}
	
	protected def computePerceptionsFor(^agent : AgentBody) : List<Percept> {
		throw new UnsupportedOperationException("TODO: computePerceptionsFor")
	}
	
	protected def applyInfluences(motionInfluences : Collection<MotionInfluence>, otherInfluences : Collection<Influence>, timeManager : TimeManager) {
		throw new UnsupportedOperationException("TODO: applyInfluences")
	}
	
	def getAllObjects : Iterable<? extends SituatedObject> {
		throw new UnsupportedOperationException("TODO: getAllObjects")
	}
	
	def setMouseTarget(target : Point2f) {
		throw new UnsupportedOperationException("TODO: setMouseTarget")
	}
	
}